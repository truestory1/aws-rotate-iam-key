---

- name: Read users map from file
  ansible.builtin.slurp:
    src: "{{ users_map_filename }}"
  register: __users_map_content
  when:
    - users_map_filename is defined
    - "'internal' in group_names"
  run_once: true

- name: Set users_map fact from file content
  ansible.builtin.set_fact:
    users_map: "{{ __users_map_content.content | b64decode | split('\n') | select('!=', '') | map('split', ':') | community.general.dict }}"
  when:
    - users_map_filename is defined
    - "'internal' in group_names"
  run_once: true

- name: Debug users_map
  ansible.builtin.debug:
    var: users_map
  when:
    - users_map_filename is defined
    - "'internal' in group_names"
  run_once: true

- name: Set fact for aws_cli_user based on key of iam_username for internal groups
  ansible.builtin.set_fact:
    aws_cli_user: "{{ users_map[iam_username] | default(iam_username) }}"
  when: "'internal' in group_names"

- name: Set fact for aws_cli_user based on value of iam_username for external groups
  ansible.builtin.set_fact:
    aws_cli_user: "{{ iam_username }}"
  when: "'external' in group_names"

- name: Debug aws_cli_user
  ansible.builtin.debug:
    msg: "aws_cli_user is set to {{ aws_cli_user }}"

- name: Check current access keys
  amazon.aws.iam_access_key_info:
    user_name: "{{ iam_username }}"
  delegate_to: localhost
  register: __access_keys
  run_once: true

- name: Initialize list of old keys
  ansible.builtin.set_fact:
    __old_keys: []
  run_once: true

- name: Filter old keys
  ansible.builtin.set_fact:
    __old_keys: "{{ __old_keys + [item] }}"
  loop: "{{ __access_keys.access_keys }}"
  when: >
    (
      (ansible_date_time.iso8601 | regex_replace(':(?=[0-9]{2}$)', '') | to_datetime('%Y-%m-%dT%H:%M:%S%z')) -
      (item.create_date | regex_replace(':(?=[0-9]{2}$)', '') | to_datetime('%Y-%m-%dT%H:%M:%S%z'))
    ).total_seconds() > aws_key_rotate | int
  run_once: true

- name: Recreate access keys
  when:
    - __old_keys | length > 0
  delegate_to: localhost
  run_once: true
  block:
    - name: Deactive and remove all current keys
      amazon.aws.iam_access_key:
        user_name: "{{ iam_username }}"
        id: "{{ item.access_key_id }}"
        state: absent
      loop: "{{ __access_keys.access_keys }}"

    - name: Create a new access key
      amazon.aws.iam_access_key:
        user_name: "{{ iam_username }}"
        state: present
      register: __new_access_key

- name: If the key has been changed we do following steps
  # noqa: no-handler
  when: __new_access_key.changed
  block:
    - name: Create temporary file
      ansible.builtin.tempfile:
        state: file
        suffix: awscredentials
      register: __tempfile_1
      run_once: true
      delegate_to: localhost

    - name: Setup secrets entry as json
      ansible.builtin.set_fact:
        __secrets_entry:
          "AWS_ACCESS_KEY_ID": "{{ __new_access_key.access_key_id }}"
          # TODO: remove later
          # AWS_SECRET_ACCESS_KEY: "{{ lookup('community.general.random_string', length=12) }}"
          "AWS_SECRET_ACCESS_KEY": "{{ __new_access_key.secret_access_key }}"
      run_once: true
      delegate_to: localhost

    - name: Write access key and secret to AWS secret manager
      community.aws.secretsmanager_secret:
        name: "users/aws/{{ iam_username }}"
        secret: "{{ __secrets_entry | to_json }}"
        secret_type: "string"
        state: present
      delegate_to: localhost
      run_once: true
      when:
        - create_aws_secrets

    - name: Write access key and secret to file
      ansible.builtin.template:
        src: "credentials.j2"
        dest: "{{ __tempfile_1.path }}"
        mode: "0600"
      run_once: true
      delegate_to: localhost

    - name: Get linux user home directory
      ansible.builtin.getent:
        database: passwd
        key: "{{ aws_cli_user }}"
      register: __user_info

    - name: Set home directory fact
      ansible.builtin.set_fact:
        __home_dir: "{{ __user_info.ansible_facts.getent_passwd[aws_cli_user][4] }}"

    - name: Create .aws directory
      ansible.builtin.file:
        dest: "{{ __home_dir }}/.aws"
        state: directory
        owner: "{{ aws_cli_user }}"
        group: "{{ aws_cli_group | default(omit) }}"
        mode: "0700"
      become: true

    - name: Copy credentials to target host
      ansible.builtin.copy:
        src: "{{ __tempfile_1.path }}"
        dest: "{{ __home_dir }}/.aws/credentials"
        owner: "{{ aws_cli_user }}"
        group: "{{ aws_cli_group | default(omit) }}"
        mode: "0600"
      become: true

    - name: Remove temporary file
      ansible.builtin.file:
        path: "{{ __tempfile_1.path }}"
        state: absent
      run_once: true
      delegate_to: localhost
