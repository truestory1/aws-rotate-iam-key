---
- name: Prepare
  hosts: all
  tasks:

    - name: Dump users_map to file
      ansible.builtin.copy:
        content: |
          {% for user, key in users_map_data.items() %}
          {{ user }}:{{ key }}
          {% endfor %}
        dest: "{{ users_map_filename }}"
        mode: "0644"
      when: "'internal' in group_names"
      become: true

    - name: Copy user_maps_data to users_map
      ansible.builtin.set_fact:
        users_map: "{{ users_map_data }}"
      when: "'internal' in group_names"

    - name: Set fact for aws_cli_user based on key of iam_username for internal groups
      ansible.builtin.set_fact:
        aws_cli_user: "{{ users_map[iam_username] }}"
      when: "'internal' in group_names"

    - name: Set fact for aws_cli_user based on value of iam_username for external groups
      ansible.builtin.set_fact:
        aws_cli_user: "{{ iam_username }}"
      when: "'external' in group_names"

    - name: Create a test IAM user
      # noqa: run-once[task]
      amazon.aws.iam_user:
        name: "{{ iam_username }}"
        state: present
      delegate_to: localhost
      run_once: true

    - name: Check current access keys
      # noqa: run-once[task]
      amazon.aws.iam_access_key_info:
        user_name: "{{ iam_username }}"
      delegate_to: localhost
      register: __access_keys
      run_once: true

    - name: Create access key if none exists
      # noqa: run-once[task]
      when: __access_keys.access_keys | length == 0
      amazon.aws.iam_access_key:
        user_name: "{{ iam_username }}"
        state: present
      delegate_to: localhost
      run_once: true

    - name: Create local linux user
      ansible.builtin.user:
        name: "{{ aws_cli_user }}"
        state: present
        createhome: true
      become: true

    - name: Ensure awscli is absent
      ansible.builtin.package:
        name: awscli
        state: absent
      become: true

    - name: Install dependencies
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      become: true
      loop:
        - unzip
        - curl-minimal

    - name: Download and install awscli
      # noqa: risky-file-permissions
      ansible.builtin.get_url:
        url: "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
        dest: "/tmp/awscli-exe-linux-x86_64.zip"
      become: true

    - name: Unzip awscli
      ansible.builtin.unarchive:
        src: "/tmp/awscli-exe-linux-x86_64.zip"
        dest: "/tmp"
        remote_src: true
      become: true

    - name: Install awscli
      ansible.builtin.command:
        cmd: "/tmp/aws/install"
      become: true
      args:
        creates: "/usr/local/bin/aws"
